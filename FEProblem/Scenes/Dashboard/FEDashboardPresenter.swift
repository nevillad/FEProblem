//
//  FEDashboardPresenter.swift
//  FEProblem
//
//  Created by Nevilkumar Lad on 02/02/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FEDashboardPresentationLogic {
    func presentFEDashboardDetails(response: FEDashboardModel.FEDashboardDetails.Response)
    func presentNextScene(response: FEDashboardModel.NextScene.Response)
    func presentLoader(type: FEDashboardLoaderType)
    func hideLoader(type: FEDashboardLoaderType)
    func presentError(type: FEDashboardErrorType)
}

class FEDashboardPresenter: FEDashboardPresentationLogic {
    weak var viewController: FEDashboardDisplayLogic?

    // MARK: Do FEDashboardDetails

    func presentFEDashboardDetails(response: FEDashboardModel.FEDashboardDetails.Response) {
        var listItem: [FEDashboardModel.FEDashboardDetails.ViewModel.DisplayedItem] = []

        for destination in response.destinations {
            let item = FEDashboardModel.FEDashboardDetails.ViewModel.DisplayedItem(DisplayedMissionName: destination.title,
                                                                                   DisplayedPlanetName: destination.planet?.name,
                                                                                   DisplayedPlanetDistance: "\(destination.planet?.distance ?? 0)",
                                                                                   DisplayedPlanetImage: destination.planet?.name.lowercased(),
                                                                                   isPlanetVisible: !(destination.planet == nil),
                                                                                   DisplayedVehicleName: destination.vehicle?.name,
                                                                                   DisplayedVehicleDistance: "\(destination.vehicle?.maxDistance ?? 0)",
                                                                                   DisplayedVehicleImage: destination.vehicle?.name.lowercased(),
                                                                                   isVehicleVisible:!(destination.vehicle == nil),
                                                                                   isVehicleSelectionEnable: !(destination.planet == nil),
                                                                                   planetName: destination.planet != nil ? "Change Planet" : "Select Planet",
                                                                                   vehicleName: destination.vehicle != nil ? "Change Vehicle" : "Select Vehicle",
                                                                                   ItemTag: destination.tag ?? 0)

//            //let item = FEDashboardModel.FEDashboardDetails.ViewModel.DisplayedItem(DisplayedPlanetName: destination.planet?.name,
//                                                                        DisplayedPlanetDistance: destination.planet?.distance,
//                                                                        DisplayedPlanetImage: destination.planet?.name.lowercased(),
//                                                                        isPlanetVisible: !(destination.planet == nil),
//                                                                        DisplayedVehicleName: destination.vehicle?.name,
//                                                                        DisplayedVehicleDistance: destination.vehicle?.maxDistance,
//                                                                        DisplayedVehicleImage: destination.vehicle?.name.lowercased(),
//                                                                        isVehicleSelectionEnable: !(destination.planet == nil),
//                                                                        planetName: destination.planet?.name ?? "Select Planet",
//                                                                        vehicleName: destination.vehicle?.name ?? "Select Vehicle",
//                                                                        ItemTag: destination.tag ?? 0)

            listItem.append(item)

            //planetName: ,

              //                                                              isVehicleSelectionEnable: !(destination.planet == nil),
        }

        let viewModel = FEDashboardModel.FEDashboardDetails.ViewModel(displayingDestination: listItem)
        viewController?.displayFEDashboardDetails(viewModel: viewModel)
    }

    func presentNextScene(response: FEDashboardModel.NextScene.Response) {
        let viewModel = FEDashboardModel.NextScene.ViewModel(selcctType: response.selcctType)
        viewController?.displayNextScene(viewModel: viewModel)
    }

    func presentLoader(type: FEDashboardLoaderType) {
        viewController?.displayLoader(type: type)
    }

    func hideLoader(type: FEDashboardLoaderType) {
        viewController?.hideLoader(type: type)
    }

    func presentError(type: FEDashboardErrorType) {
        viewController?.displayError(type: type)
    }
}
