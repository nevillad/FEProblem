//
//  FEDashboardViewController.swift
//  FEProblem
//
//  Created by Nevilkumar Lad on 02/02/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FEDashboardDisplayLogic: class {
    func displayMissions(viewModel: FEDashboardModel.FEDashboardDetails.ViewModel)
    func displayNextScene(viewModel: FEDashboardModel.NextScene.ViewModel)
    func displayLoader(type: FEDashboardLoaderType)
    func hideLoader(type: FEDashboardLoaderType)
    func displayError(type: FEDashboardErrorType)
}

class FEDashboardViewController: BaseViewController, FEDashboardDisplayLogic {
    var interactor: FEDashboardBusinessLogic?
    var router: (NSObjectProtocol & FEDashboardRoutingLogic & FEDashboardDataPassing)?

    /// UITableView For showing list of Destinations/ Missions
    @IBOutlet weak var tvDashboard: UITableView!

    /// UIButton to find Result
    @IBOutlet weak var btnNext: FESecondaryButton!

    /// UILable to show messages to user e.g error, result
    @IBOutlet weak var lblMessage: UILabel!

    /// Datasouce for tvDashboard, holds Lits Item for Missions/Destinations
    var displayedList: [FEDashboardModel.FEDashboardDetails.ViewModel.DisplayedItem] = []

    /**
     Static Method to initialize ViewConroller from Storyboarad
        - Returns FEDashboardViewController object
     */
    class func instantiateFromStoryboard() ->  FEDashboardViewController {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        return storyboard.instantiateViewController(withIdentifier: String(describing: self)) as!  FEDashboardViewController
    }

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = FEDashboardInteractor()
        let presenter = FEDashboardPresenter()
        let router = FEDashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        initialise()
    }

    // MARK: Components Insilisation

    /**
    Initlize UIComponet
     - Setting Navigation title
     - Setting tableView DataSouce and Delegate
     - Resigter cell for tableview
     */
    private func initialise() {

        // Setting bar and Title
        self.navigationController?.navigationBar.barTintColor = primaryColor
        self.navigationController?.navigationBar.tintColor = whiteColor
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: whiteColor]
        self.title = "Finding Falcone".uppercased()

        // Auto
        tvDashboard.estimatedRowHeight = 1000
        tvDashboard.rowHeight = UITableView.automaticDimension

        // Register cell for tableview
        tvDashboard.register(UINib(nibName: kDashboardTableViewCell_ID, bundle: Bundle.main), forCellReuseIdentifier: kDashboardTableViewCell_ID)
        tvDashboard.dataSource = self
        tvDashboard.delegate = self
        interactor?.initialise()
    }
}

// MARK:- FEDashboardDisplayLogic Implementations
extension FEDashboardViewController {

    func displayMissions(viewModel: FEDashboardModel.FEDashboardDetails.ViewModel) {
        self.displayedList = viewModel.displayingDestination
        tvDashboard.reloadData()
    }

    func displayNextScene(viewModel: FEDashboardModel.NextScene.ViewModel) {
        if viewModel.selectionType == .showSubmit {
            btnNext.isEnabled = viewModel.isViewNextVisible
        } else {
            router?.showNextScene(screenSelection: viewModel.selectionType)
        }
    }

    func displayLoader(type: FEDashboardLoaderType) {
        DispatchQueue.main.async {
            switch type {
            case .general: self.lblMessage.superview?.isHidden = false
            }
        }
    }

    func hideLoader(type: FEDashboardLoaderType) {
        self.lblMessage.superview?.isHidden = true
    }

    func displayError(type: FEDashboardErrorType) {
        self.lblMessage.superview?.isHidden = false
        switch type {
        case .backend: self.lblMessage.text = SOMETHING_WENT_WRONG
        case .custom(let message): self.lblMessage.text = message
        }
    }
}

// MARK:- IB Actions
extension FEDashboardViewController {

    @IBAction func cliecked(sender: UIButton) {
        router?.showNextScene(screenSelection: .showResult)
    }

    @objc
    func selectPlanet(_ sender: UIButton) {
        interactor?.selectDestination(request: FEDashboardModel.FEDashboardDestinationSelection.Request(selectionType: .selectPlanet, selectedID: sender.tag))
    }

    @objc
    func selectVehicle(_ sender: UIButton) {
        interactor?.selectDestination(request: FEDashboardModel.FEDashboardDestinationSelection.Request(selectionType: .selectVehicle, selectedID: sender.tag))
    }

    @objc
    func clearPlanet(_ sender: UIButton) {
        interactor?.clearSelection(request: FEDashboardModel.FEDashboardDestinationSelection.Request(selectionType: .selectPlanet, selectedID: sender.tag))
    }

    @objc
    func clearVehicle(_ sender: UIButton) {
        interactor?.clearSelection(request: FEDashboardModel.FEDashboardDestinationSelection.Request(selectionType: .selectVehicle, selectedID: sender.tag))
    }
}

// MARK: UITableView delegate and datasource
extension FEDashboardViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return  displayedList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: kDashboardTableViewCell_ID, for: indexPath) as! DashboardTableViewCell

        let cellItem = displayedList[indexPath.row]
        cell.configureCell(item: cellItem,
                           target: self, buttonPlanetSelector: #selector(selectPlanet(_:)),
                           buttonVehicleSelector: #selector(selectVehicle(_:)),
                           buttonClearVehicleSelector: #selector(clearVehicle(_:)),
                           buttonClearPlanetSelector: #selector(clearPlanet(_:)))

        return cell
    }
}

// MARK: ListOption Delegate
extension FEDashboardViewController: ListOptionDelegate {

    func didSelect(_id selectedID: Int64, selectionType: SelectionType) {
        interactor?.setOption(request: FEDashboardModel.FEDashboardSetOption.Request(selectionType: selectionType, selectedID: selectedID))
    }
}

