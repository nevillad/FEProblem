//
//  FEDashboardViewController.swift
//  FEProblem
//
//  Created by Nevilkumar Lad on 02/02/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FEDashboardDisplayLogic: class {
    func displayFEDashboardDetails(viewModel: FEDashboardModel.FEDashboardDetails.ViewModel)
    func displayNextScene(viewModel: FEDashboardModel.NextScene.ViewModel)
    func displayLoader(type: FEDashboardLoaderType)
    func hideLoader(type: FEDashboardLoaderType)
    func displayError(type: FEDashboardErrorType)
}

class FEDashboardViewController: BaseViewController, FEDashboardDisplayLogic {
    var interactor: FEDashboardBusinessLogic?
    var router: (NSObjectProtocol & FEDashboardRoutingLogic & FEDashboardDataPassing)?

    class func instantiateFromStoryboard() ->  FEDashboardViewController {
        #error("please update your storyboard name below")
        let storyboard = UIStoryboard(name: "<storyboard_name>", bundle: nil)
        return storyboard.instantiateViewController(withIdentifier: String(describing: self)) as!  FEDashboardViewController
    }

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = FEDashboardInteractor()
        let presenter = FEDashboardPresenter()
        let router = FEDashboardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.initialise(showLoader: true)
    }

    // MARK: Do FEDashboardDetails

    //@IBOutlet weak var nameTextField: UITextField!

    func doFEDashboardDetails() {
        let request = FEDashboardModel.FEDashboardDetails.Request()
        interactor?.doFEDashboardDetails(request: request)
    }

    func displayFEDashboardDetails(viewModel: FEDashboardModel.FEDashboardDetails.ViewModel) {
        //nameTextField.text = viewModel.name
    }

    func displayNextScene(viewModel: FEDashboardModel.NextScene.ViewModel) {
        
    }

    func displayLoader(type: FEDashboardLoaderType) {
        DispatchQueue.main.async {
            switch type {
            case .general: super.showIndicator("please wait...")
            }
        }
    }

    func hideLoader(type: FEDashboardLoaderType) {
        super.hideIndicator()
    }

    func displayError(type: FEDashboardErrorType) {

    }
}
