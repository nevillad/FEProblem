//
//  ListOptionsPresenter.swift
//  FEProblem
//
//  Created by Nevilkumar Lad on 03/02/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListOptionsPresentationLogic {
    func presentListOptionsDetails(response: ListOptionsModel.ListOptionsDetails.Response)
    func presentNextScene(response: ListOptionsModel.NextScene.Response)
    func presentLoader(type: ListOptionsLoaderType)
    func hideLoader(type: ListOptionsLoaderType)
    func presentError(type: ListOptionsErrorType)
    func presentListOptions(response: ListOptionsModel.ListOptions.Response)
}

class ListOptionsPresenter: ListOptionsPresentationLogic {
    weak var viewController: ListOptionsDisplayLogic?

    // MARK: Do ListOptionsDetails
    func presentListOptionsDetails(response: ListOptionsModel.ListOptionsDetails.Response) {

    }

    func presentListOptions(response: ListOptionsModel.ListOptions.Response) {
        var title: String = ""
        var subTitle: String = ""
        var planetName: String?
        var planetDistance: String?
        var isPlanetViewVisible: Bool = false

        var listItems: [ListOptionsModel.ListOptions.ViewModel.DisplayedList] = []

        if let planets = response.items as? [Planet] {
            title = "Select Planet"
            subTitle = "Select Planet"
            listItems = getItemFrom(planet: planets, selectedPlanet: response.selectedItem?.planet)
        } else if let vehicles = response.items as? [Vehicle] {
            isPlanetViewVisible = true
            planetName = response.selectedItem?.planet?.name
            planetDistance = "\(response.selectedItem?.planet?.distance ?? 0)"
            title = "Select Vehicle"
            subTitle = "Select Vehcile"
            listItems = getItemFrom(vehicle: vehicles, selectedVehicle: response.selectedItem?.vehicle)

        }

        let viewModel = ListOptionsModel.ListOptions.ViewModel(title: title, subTitle: subTitle, planetName: planetName, planetDistance: planetDistance, isPlanetViewVisible: isPlanetViewVisible ,displayedList: listItems)

        viewController?.displayListOptions(viewModel: viewModel)
    }

    func presentNextScene(response: ListOptionsModel.NextScene.Response) {
        let viewModel = ListOptionsModel.NextScene.ViewModel(_id: response._id, selectionType: response.selectionType)
        viewController?.displayNextScene(viewModel: viewModel)
    }

    func presentLoader(type: ListOptionsLoaderType) {
        viewController?.displayLoader(type: type)
    }

    func hideLoader(type: ListOptionsLoaderType) {
        viewController?.hideLoader(type: type)
    }

    func presentError(type: ListOptionsErrorType) {
        viewController?.displayError(type: type)
    }

    fileprivate func getItemFrom( planet planetList: [Planet], selectedPlanet: Planet?)  -> [ListOptionsModel.ListOptions.ViewModel.DisplayedList] {
        var list: [ListOptionsModel.ListOptions.ViewModel.DisplayedList] = []
        for planet in planetList {

            list.append(ListOptionsModel.ListOptions.ViewModel.DisplayedList(title: planet.name, subTitle: "\(planet.distance)", leftImage: planet.name.lowercased(), isSelcted: planet._id == selectedPlanet?._id ))
        }
        return list
    }

    fileprivate func getItemFrom(vehicle vehicleList: [Vehicle], selectedVehicle: Vehicle?)  -> [ListOptionsModel.ListOptions.ViewModel.DisplayedList] {
        var list: [ListOptionsModel.ListOptions.ViewModel.DisplayedList] = []
        for vehicle in vehicleList {
            list.append(ListOptionsModel.ListOptions.ViewModel.DisplayedList(title: vehicle.name, subTitle: "\(vehicle.maxDistance)", leftImage: vehicle.name.lowercased(), isSelcted: vehicle._id == selectedVehicle?._id))
        }
        return list
    }
}
