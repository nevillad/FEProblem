//
//  FEResultPresenter.swift
//  FEProblem
//
//  Created by Nevilkumar Lad on 04/02/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FEResultPresentationLogic {
    func presentFEResultDetails(response: FEResultModel.FEResultDetails.Response)
    func presentNextScene(response: FEResultModel.NextScene.Response)
    func presentLoader(type: FEResultLoaderType)
    func hideLoader(type: FEResultLoaderType)
    func presentError(type: FEResultErrorType)
}

class FEResultPresenter: FEResultPresentationLogic {
    weak var viewController: FEResultDisplayLogic?

    // MARK: Do FEResultDetails

    func presentFEResultDetails(response: FEResultModel.FEResultDetails.Response) {
        var message = ""
        var planetImage: String?
        var vehicleImage: String?
        var missionStatus: String? = "mission_success"

        if response.result.status == "success" {
            message = "SUCCESS!!\nCongratulations ðŸŽ‰ on finding Falcone!\nKINGðŸ¤´Khan is mighty pleased!ðŸ˜º\n\nFound on planet (\(response.destination?.planet?.name ?? "")) with the help of \(response.destination?.vehicle?.name ?? "")"
            vehicleImage = response.destination?.vehicle?.name.lowercased()
            planetImage = response.destination?.planet?.name.lowercased()
        } else if response.result.status == "false" {
            message = "Mission Failed!!\nPlease Try Again!"
            missionStatus = "mission_fail"
        } else if let error = response.result.error {
            message = "Mission Aborted!!\n\(error)"
            missionStatus = "mission_error"
        }

        let viewModel = FEResultModel.FEResultDetails.ViewModel(message: message, planetImage: planetImage, vehileImage: vehicleImage, notFoundImage: missionStatus)
        viewController?.displayFEResultDetails(viewModel: viewModel)
    }

    func presentNextScene(response: FEResultModel.NextScene.Response) {
        let viewModel = FEResultModel.NextScene.ViewModel()
        viewController?.displayNextScene(viewModel: viewModel)
    }

    func presentLoader(type: FEResultLoaderType) {
        viewController?.displayLoader(type: type)
    }

    func hideLoader(type: FEResultLoaderType) {
        viewController?.hideLoader(type: type)
    }

    func presentError(type: FEResultErrorType) {
        viewController?.displayError(type: type)
    }
}
